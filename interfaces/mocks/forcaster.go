// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/forcaster.go
//
// Generated by this command:
//
//	mockgen -source=interfaces/forcaster.go -destination=interfaces/mocks/forcaster.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	data "national-weather-service-api/data"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockForcaster is a mock of Forcaster interface.
type MockForcaster struct {
	ctrl     *gomock.Controller
	recorder *MockForcasterMockRecorder
}

// MockForcasterMockRecorder is the mock recorder for MockForcaster.
type MockForcasterMockRecorder struct {
	mock *MockForcaster
}

// NewMockForcaster creates a new mock instance.
func NewMockForcaster(ctrl *gomock.Controller) *MockForcaster {
	mock := &MockForcaster{ctrl: ctrl}
	mock.recorder = &MockForcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForcaster) EXPECT() *MockForcasterMockRecorder {
	return m.recorder
}

// GetForcast mocks base method.
func (m *MockForcaster) GetForcast(lat, long float64) (*data.Forcast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForcast", lat, long)
	ret0, _ := ret[0].(*data.Forcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForcast indicates an expected call of GetForcast.
func (mr *MockForcasterMockRecorder) GetForcast(lat, long any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForcast", reflect.TypeOf((*MockForcaster)(nil).GetForcast), lat, long)
}
